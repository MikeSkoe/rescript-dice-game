// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Floor from "./floor.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var empty = {
  direction: /* Waiting */0,
  currentFloor: Floor.empty,
  requestedFloor: undefined
};

function isTargetFloor(param, floor) {
  var direction = param.direction;
  if (direction) {
    return direction._0 === floor;
  } else {
    return false;
  }
}

function isCurrentFloor(param, floor) {
  return floor === param.currentFloor;
}

function isRequested(param, floor) {
  var requestedFloor = param.requestedFloor;
  if (requestedFloor !== undefined) {
    return Caml_obj.caml_equal(floor, Caml_option.valFromOption(requestedFloor));
  } else {
    return false;
  }
}

function isOpen(param, floor) {
  if (param.direction === /* Waiting */0) {
    return Caml_obj.caml_equal(floor, param.currentFloor);
  } else {
    return false;
  }
}

var Get = {
  isTargetFloor: isTargetFloor,
  isCurrentFloor: isCurrentFloor,
  isRequested: isRequested,
  isOpen: isOpen
};

function startMoveIfRequested(param) {
  var requestedFloor = param.requestedFloor;
  var currentFloor = param.currentFloor;
  var direction = param.direction;
  if (requestedFloor !== undefined && !direction) {
    return {
            direction: /* MovingTo */{
              _0: Caml_option.valFromOption(requestedFloor)
            },
            currentFloor: currentFloor,
            requestedFloor: undefined
          };
  } else {
    return {
            direction: direction,
            currentFloor: currentFloor,
            requestedFloor: requestedFloor
          };
  }
}

function getShift(param) {
  var currentFloor = param.currentFloor;
  var direction = param.direction;
  if (!direction) {
    return 0;
  }
  var targetFloor = direction._0;
  if (Caml_obj.caml_lessthan(targetFloor, currentFloor)) {
    return -1;
  } else if (Caml_obj.caml_greaterthan(targetFloor, currentFloor)) {
    return 1;
  } else {
    return 0;
  }
}

function tick(elevator) {
  var elevator$1 = startMoveIfRequested(elevator);
  var shift = getShift(elevator$1);
  return {
          direction: shift === 0 ? /* Waiting */0 : elevator$1.direction,
          currentFloor: Floor.shiftBy(elevator$1.currentFloor, shift),
          requestedFloor: elevator$1.requestedFloor
        };
}

function requestFloor(elevator, requested) {
  var match = elevator.requestedFloor;
  if (match !== undefined) {
    return elevator;
  } else {
    return {
            direction: elevator.direction,
            currentFloor: elevator.currentFloor,
            requestedFloor: requested
          };
  }
}

export {
  empty ,
  Get ,
  requestFloor ,
  tick ,
  
}
/* No side effect */
