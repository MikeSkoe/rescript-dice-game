// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";

function Make(F) {
  var empty = {
    TAG: /* StandsAt */0,
    _0: F.empty
  };
  var tick = function (elevator) {
    if (elevator.TAG === /* StandsAt */0) {
      return {
              TAG: /* StandsAt */0,
              _0: elevator._0
            };
    }
    var targetFloor = elevator._1;
    var currFloor = elevator._0;
    if (currFloor !== Curry._2(F.moveToward, currFloor, targetFloor)) {
      return {
              TAG: /* MovingTo */1,
              _0: Curry._2(F.moveToward, currFloor, targetFloor),
              _1: targetFloor
            };
    } else {
      return {
              TAG: /* StandsAt */0,
              _0: currFloor
            };
    }
  };
  var requestFloor = function (elevator, requested) {
    if (elevator.TAG !== /* StandsAt */0) {
      return elevator;
    }
    var currFloor = elevator._0;
    if (Caml_obj.caml_notequal(currFloor, requested)) {
      return {
              TAG: /* MovingTo */1,
              _0: currFloor,
              _1: requested
            };
    } else {
      return elevator;
    }
  };
  var isTargetFloor = function (elevator, floor) {
    if (elevator.TAG === /* StandsAt */0) {
      return false;
    } else {
      return Caml_obj.caml_equal(elevator._1, floor);
    }
  };
  var isCurrentFloor = function (elevator, floor) {
    return Caml_obj.caml_equal(elevator._0, floor);
  };
  var isOpen = function (elevator) {
    if (elevator.TAG === /* StandsAt */0) {
      return true;
    } else {
      return false;
    }
  };
  var Selector = {
    isTargetFloor: isTargetFloor,
    isCurrentFloor: isCurrentFloor,
    isOpen: isOpen
  };
  return {
          empty: empty,
          tick: tick,
          requestFloor: requestFloor,
          Selector: Selector
        };
}

export {
  Make ,
  
}
/* No side effect */
